法1：暴力法
执行用时: 8 ms
内存消耗: 13 MB
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int num = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] == target)   num++;
        }
        return num;
    }
};

法2：二分法
执行用时：8 ms, 在所有 C++ 提交中击败了65.40% 的用户
内存消耗：13 MB, 在所有 C++ 提交中击败了8.24% 的用户
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int left = 0, right = n - 1;
        int pos1 = -1;
        while(left <= right) {
            int mid = (left + right) / 2;

            if(nums[mid] == target)
                pos1 = mid;

            if(nums[mid] >= target)
                right = mid - 1;
            else if(nums[mid] < target)
                left = mid + 1;
        }
        if(pos1 == -1)
            return 0;
        
        left = 0, right = n - 1;
        int pos2 = n;
        while(left <= right) {
            int mid = (left + right) / 2;

            if(nums[mid] > target)
                pos2 = mid;
            
            if(nums[mid] > target)
                right = mid - 1;
            else if(nums[mid] <= target)
                left = mid + 1;
        }
        return pos2 - pos1;
    }
};

法3：STL模板掉包
执行用时：8 ms, 在所有 C++ 提交中击败了65.40% 的用户
内存消耗：12.8 MB, 在所有 C++ 提交中击败了88.06% 的用户
class Solution {
public:
    int search(vector<int>& nums, int target) {
        return upper_bound(nums.begin(), nums.end(), target) - lower_bound(nums.begin(), nums.end(), target);
    }
};
