法1：递归法，根据正负奇偶条件分四种确定返回情况，其中核心思想是 x^n = (1/x)^(-n)  x^(2n) = (x^2)^n
执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户
内存消耗：5.7 MB, 在所有 C++ 提交中击败了99.50% 的用户
class Solution {
public:
    double myPow(double x, int n) {
        if(n == 0)      return (double)1;
        if(n == -1)     return 1.0 / x;
        if(n & 1 == 1)    return x * myPow(x*x, n>>1);  //若n为奇数，返回 x * mypow()
        else    return myPow(x*x, n>>1);
    }
};
