法1：双指针法，细节比较多，写在下面
执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户
内存消耗：8.1 MB, 在所有 C++ 提交中击败了70.84% 的用户
class Solution {
public:
    string reverseWords(string s) {
        //可以不判断空，因为倒数第二步有判断
        int i = s.size() - 1, j = s.size() - 1, n = s.size();
        while(j >= 0)
        {
            while(j >= 0 && s[j] == ' ')    j--;     //找到第一个不为空的字符
            if(j < 0)    break;   //如果j<0，说明到头了，前面几个字符都为空，退出
            i = j;
            while(i >= 0 && s[i] != ' ')    i--;    //找到第一个为空的字符，使用它的下一个字符，此时s[i+1]~s[j]为一个完整的字符串，如world!
            s += s.substr(i + 1, j - i);    //截取该字符串，放到最后
            s += ' ';                       //加个空格
            j = i - 1;                      //j放到i前一位
        }
        s.erase(0, n);                      //删除整个原字符串
        if(!s.empty())    s.pop_back();   //如果不空，删除最后一个多余的空格
        //之所以在这里判断是否为空，是因为如果输入s = "   "时，s.erase(0, n)把所有空格删掉后，s为空，需要判断是否继续erase后面多余的空格
        return s;
    }
};
