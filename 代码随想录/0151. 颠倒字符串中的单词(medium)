法1：双指针法，从后往前遍历，遇到空格判断是否是多余空格，若不是，在s后追加该部分单词，注意最后需要判断是否有首个单词遗漏
时间O(N)  空间O(N) 并不是O(1)
执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户
内存消耗：7.2 MB, 在所有 C++ 提交中击败了29.21% 的用户
class Solution {
public:
    string reverseWords(string s) {
        int n = s.size();
        int i = n - 1, j = n;
        for (; i >= 0; i--) {
            if (s[i] == ' ') {
                if (j == i + 1) {     // 若为邻接空格，则跳过
                    j--;
                } else {
                    s += s.substr(i + 1, j - i - 1);
                    s += ' ';
                    j = i;
                }
            }
        }
        if (s[0] != ' ') {              // 注意判断首个字符是否为空格，不为空格需要追加首单词，为空格则需删除末尾多余空格
            s += s.substr(0, j);
        } else {
            s.pop_back();
        }
        return s.substr(n);
    }
};

法2：空间为O(1)的解法，比较麻烦一点，先把多余的空格删掉，然后整体反转，随后针对每一个单词再次反转，达到最终效果
class Solution {
public:
    void reverse(string& s, int start, int end){ //翻转，区间写法：闭区间 []
        for (int i = start, j = end; i < j; i++, j--) {
            swap(s[i], s[j]);
        }
    }

    void removeExtraSpaces(string& s) {//去除所有空格并在相邻单词之间添加空格, 快慢指针。
        int slow = 0;   //整体思想参考Leetcode: 27. 移除元素：https://leetcode-cn.com/problems/remove-element/
        for (int i = 0; i < s.size(); ++i) { //
            if (s[i] != ' ') { //遇到非空格就处理，即删除所有空格。
                if (slow != 0) s[slow++] = ' '; //手动控制空格，给单词之间添加空格。slow != 0说明不是第一个单词，需要在单词前添加空格。
                while (i < s.size() && s[i] != ' ') { //补上该单词，遇到空格说明单词结束。
                    s[slow++] = s[i++];
                }
            }
        }
        s.resize(slow); //slow的大小即为去除多余空格后的大小。
    }

    string reverseWords(string s) {
        removeExtraSpaces(s); //去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。
        reverse(s, 0, s.size() - 1);
        int start = 0; //removeExtraSpaces后保证第一个单词的开始下标一定是0。
        for (int i = 0; i <= s.size(); ++i) {
            if (i == s.size() || s[i] == ' ') { //到达空格或者串尾，说明一个单词结束。进行翻转。
                reverse(s, start, i - 1); //翻转，注意是左闭右闭 []的翻转。
                start = i + 1; //更新下一个单词的开始下标start
            }
        }
        return s;
    }
};
