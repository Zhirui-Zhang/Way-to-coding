法1：在temp_v的基础上再引入堆栈temp_s，倒序存储偶数行数组元素，用row表示奇偶行数
执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户
内存消耗：13.1 MB, 在所有 C++ 提交中击败了5.52% 的用户
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> v;
        if(root == NULL)   return v;
        queue<TreeNode*> q;
        q.push(root);
        int row = 1;    //当前行数
        while(!q.empty())
        {
            vector<int> temp_v;     //临时存储数组
            stack<int> temp_s;      //临时倒序存储数组
            for(int i = q.size(); i > 0; i--)
            {
                if(row % 2 == 0)    //偶数行倒序
                {
                    TreeNode* temp_q = q.front();   //临时存储节点
                    temp_s.push(temp_q->val);
                    q.pop();
                    if(temp_q->left != NULL)    
                    {
                        q.push(temp_q->left);
                    }
                    if(temp_q->right != NULL)   
                    {
                        q.push(temp_q->right);
                    }
                }
                else    //奇数行正序
                {
                    TreeNode* temp_q = q.front();   //临时存储节点
                    temp_v.push_back(temp_q->val);
                    q.pop();
                    if(temp_q->left != NULL)    
                    {
                        q.push(temp_q->left);
                    }
                    if(temp_q->right != NULL)   
                    {
                        q.push(temp_q->right);
                    }
                }
            }
            if(row % 2 == 0)    //偶数行倒序
            {
                for(int i = temp_s.size(); i > 0; i--)  
                //这里不能用for(int j = 0; j < temp_s.size(); j++)，因为temp_s的size随时在变化！！！
                {
                    temp_v.push_back(temp_s.top());
                    temp_s.pop();
                }
            }
            v.push_back(temp_v);
            row++;
        }
        return v;
    }
};
