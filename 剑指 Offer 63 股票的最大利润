法1：暴力法 复杂度你n^2 无奈的算法...正统方法肯定是动态规划法
执行用时：1764 ms, 在所有 C++ 提交中击败了5.04% 的用户
内存消耗：12.5 MB, 在所有 C++ 提交中击败了73.59% 的用户
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.empty())    return 0;
        int res = 0, n = prices.size();
        for(int i = 0; i < n - 1; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                if(prices[j] - prices[i] > res)     res = prices[j] - prices[i];
            }
        }
        return res;
    }
};

法2：动态规划法
