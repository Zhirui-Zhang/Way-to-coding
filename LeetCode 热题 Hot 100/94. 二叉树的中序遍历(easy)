法1：DFS很简单，但是题目进阶要求用迭代求
时间O(N)  空间O(N)
执行用时：4 ms, 在所有 C++ 提交中击败了40.28% 的用户
内存消耗：8.1 MB, 在所有 C++ 提交中击败了84.21% 的用户
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        dfs(root);
        return res;
    }
private:
    vector<int> res;
    void dfs(TreeNode* root)
    {
        if(!root)    return;
        dfs(root->left);
        res.push_back(root->val);
        dfs(root->right);
    }
};

法2：迭代法，利用栈，每次从判断左子树是否为空入手，若不空将其入栈并将左子树置为空，否则加入res并pop，选择右子树入栈
时间O(N)  空间O(N)
执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户
内存消耗：7.9 MB, 在所有 C++ 提交中击败了97.86% 的用户
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        if(!root)    return res;
        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty())
        {
            TreeNode* temp = s.top();
            if(temp->left)
            {
                s.push(temp->left);
                temp->left = nullptr;
            }
            else    
            {
                res.push_back(temp->val);
                s.pop();
                if(temp->right)    s.push(temp->right);
            }
        }
        return res;
    }
};
