法1：回溯+剪枝法，很简单
时间O(2^N)  空间O(N)
执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户
内存消耗：6.8 MB, 在所有 C++ 提交中击败了95.77% 的用户
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<int> temp;
        res.push_back(temp);    // 先加入一个空集
        dfs(temp, nums, 0);
        return res;
    }
private:
    vector<vector<int>> res;
    void dfs(vector<int>& temp, vector<int>& nums, int pos)
    {
        if(pos == nums.size())    return;   // 退出条件，当前遍历位置超过数组长度
        for(; pos < nums.size(); pos++)
        {
            temp.push_back(nums[pos]);      // 压入一个后立即保存该子集，每次递归结束返回后记得弹出最后一个元素
            res.push_back(temp);
            dfs(temp, nums, pos + 1);
            temp.pop_back();
        }
    }
};
